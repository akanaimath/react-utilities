'use strict';

/**
 * Similar to Object.assign, but works with arrays too
 * @param {any} data
 * @param {any} target
 */var _slicedToArray=function(){function sliceIterator(arr,i){var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break}}catch(err){_d=true;_e=err}finally{try{if(!_n&&_i['return'])_i['return']()}finally{if(_d)throw _e}}return _arr}return function(arr,i){if(Array.isArray(arr)){return arr}else if(Symbol.iterator in Object(arr)){return sliceIterator(arr,i)}else{throw new TypeError('Invalid attempt to destructure non-iterable instance')}}}();var _typeof=typeof Symbol==='function'&&typeof Symbol.iterator==='symbol'?function(obj){return typeof obj}:function(obj){return obj&&typeof Symbol==='function'&&obj.constructor===Symbol&&obj!==Symbol.prototype?'symbol':typeof obj};
function copyTo(data,target){
for(var key in data){
var type=_typeof(data[key]);
if(type=='object'){
target[key]=cloneObject(data[key]);
}else{
target[key]=data[key];
}
}
return target;
}
/**
 * Creates a full recursive copy of an object.
 * @param {any} data
 * Note, only the following types are copied: primitives, Object and Array
 */
function cloneObject(data){
if(typeof data=='undefined'||data==null){
return null;
}else if((typeof data==='undefined'?'undefined':_typeof(data))!='object'){
return data;
}
if(data.constructor==Array){
var target=[];
return copyTo(data,target);
}else if(data.constructor==Object){
var _target={};
return copyTo(data,_target);
}else{
return data;
}
}

/**
 * @param {any} srcObj
 * @param {any} dstObj
 * 
 * Only merges elements that exist in target and data if they are of the same object type.
 * 
 * Example:
 * 
 * Given:
 *   srcObj={
 *     a: 1,
 *     b: 2,
 *     c: [0, 1, 3,{d: 0,f: [0,1],g: {x: 11} }]
 *   };
 *   dstObj={
 *        e: [0,0,0],
 *        c: [1,0,2,{f: [1],g: {x: 12,y: 13}}]
 *    };
 * 
 * The resulting object would be:
 * 
 *   target={
 *      a: 1,
 *      b: 2,
 *      c: [1, 0, 2,{d: 0,f: [1,1],g: {x: 12, y: 13}}],
 *      e: [0,0,0]
 *    };
 */
function mergeObjects(srcObj,dstObj){

var src=srcObj;
var dst=dstObj;
var srcType=typeof src==='undefined'?'undefined':_typeof(src);
var dstType=typeof dst==='undefined'?'undefined':_typeof(dst);

if(src==null){
return dst==null?null:cloneObject(dst);
}else if(dst==null){
return cloneObject(src);
}else if(srcType==dstType&&srcType=='object'){
if(src.constructor!=dst.constructor){
return cloneObject(src);
}else{
var keys=void 0;
var result=cloneObject(src);
if(src.constructor==Array){
keys=src.length>dst.length?src:dst;
}else{
keys={};
Object.assign(keys,src,dst);
}
for(var key in keys){
var _srcType=_typeof(src[key]);
var _dstType=_typeof(dst[key]);
if(src.hasOwnProperty(key)&&dst.hasOwnProperty(key)){
if(_srcType==_dstType&&_srcType=='object'){
if(src[key]==null){
result[key]=cloneObject(dst[key]);
}else if(dst[key]==null){
result[key]=cloneObject(src[key]);
}else{
result[key]=mergeObjects(src[key],dst[key]);
}
}else if(_srcType=='object'&&src[key]!=null){
result[key]=cloneObject(src[key]);
}else if(dst[key]!=null){
result[key]=cloneObject(dst[key]);
}else{
result[key]=cloneObject(src[key]);
}

}else if(!src.hasOwnProperty(key)){
result[key]=cloneObject(dst[key]);
}else{
result[key]=cloneObject(src[key]);
}
}
return result;
}
}else if(srcType=='object'){
return cloneObject(src);
}else{
return cloneObject(dst);
}
}

/**
 * Clones a react props object.  All fields in the ignore list are ignored
 * @param {Object} props
 * @param {Array} ignore
 */
function cloneProps(props){var ignore=arguments.length>1&&arguments[1]!==undefined?arguments[1]:['root'];
var target={};

var ign={};
for(var id in ignore){
ign[ignore[id]]=null;
}
for(var key in props){
if(ign.hasOwnProperty(key)){
continue;
}

target[key]=props[key];
}
var result=cloneObject(target);

return result;
}


/**
 * 
 * @param {any} src
 * @param {any} dst
 * 
 * Returns true if the 2 objects differ
 */
function objectsDiffer(srcObj,dstObj){

var que=[[srcObj,dstObj]];
var src=void 0,dst=void 0;var _loop=function _loop(){var _que$pop=

que.pop();var _que$pop2=_slicedToArray(_que$pop,2);src=_que$pop2[0];dst=_que$pop2[1];
var srcType=typeof src==='undefined'?'undefined':_typeof(src);
var dstType=typeof dst==='undefined'?'undefined':_typeof(dst);

if(srcType!=dstType){
return{v:true};
}else if(srcType!='object'){
if(src!=dst){
return{v:true};
}
}else if(src==null&&dst==null){
if(que.length<1){
return{v:false};
}
}else if(src==null&&dst!=null){
return{v:true};
}else if(src!=null&&dst==null){
return{v:true};
}else if(src.constructor!=dst.constructor){
return{v:true};
}

var keys=void 0;
var count=0;
if(src.constructor==Array){
if(src.length!=dst.length){
return{v:true};
}else{
keys=src.length;
}
}else{
keys={};
Object.keys(src).map(function(key){keys[key]=null});
Object.keys(dst).map(function(key){keys[key]=null});
}

for(var key in keys){
if(src.hasOwnProperty(key)&&dst.hasOwnProperty(key)){
que.push([src[key],dst[key]]);
}else if(!src.hasOwnProperty(key)&&dst.hasOwnProperty(key)){
return{v:true};
}else if(src.hasOwnProperty(key)&&!dst.hasOwnProperty(key)){
return{v:true};
}
}};while(que.length>0){var _ret=_loop();if((typeof _ret==='undefined'?'undefined':_typeof(_ret))==='object')return _ret.v;
}
return false;
}

/**
 * 
 * @param {any} a
 * @param {any} b
 * 
 * returns a new list that excludes b from a
 */
function excludeList(a,b){
var result=[];
for(var id in a){
var value=a[id];
if(!b.includes(value)){
result.push(value);
}
}
return result;
}
/**
* Currently can check only simple objects, not nesteded
* @param {*} obj1 
* @param {*} obj2 
*/
var isObjectsEqual=function isObjectsEqual(obj1,obj2){
var flag=false;
if((typeof obj1==='undefined'?'undefined':_typeof(obj1))==(typeof obj2==='undefined'?'undefined':_typeof(obj2))&&(typeof obj1==='undefined'?'undefined':_typeof(obj1))=='object'&&!Array.isArray(obj1)&&!Array.isArray(obj2)){
var arrayProperty1=Object.getOwnPropertyNames(obj1);
var arrayProperty2=Object.getOwnPropertyNames(obj2);
if(arrayProperty1.length==arrayProperty2.length&&arrayProperty1.length==0){
flag=true;
}else
if(arrayProperty1.length!=arrayProperty2.length){
flag=false;
}else
{
for(var i=0;i<arrayProperty1.length;i++){
var propName=arrayProperty1[i];
// let type1 = typeof obj1[propName];
// let type2 = typeof obj2[propName];
if(obj1[propName]!==obj2[propName]){
flag=false;
}else
{
flag=true;
}
}
}
}else
{
flag=false;
}
return flag;
};

module.exports={
cloneObject:cloneObject,
mergeObjects:mergeObjects,
objectsDiffer:objectsDiffer,
cloneProps:cloneProps,
excludeList:excludeList,
isObjectsEqual:isObjectsEqual};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,